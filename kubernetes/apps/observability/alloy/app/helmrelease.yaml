---
# yaml-language-server: $schema=https://kubernetes-schemas.pages.dev/helm.toolkit.fluxcd.io/helmrelease_v2.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: alloy
spec:
  interval: 1h
  chart:
    spec:
      chart: alloy
      version: 0.12.3
      sourceRef:
        kind: HelmRepository
        name: grafana
        namespace: flux-system
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      strategy: rollback
      retries: 3
  values:
    alloy:
      configMap:
        content: |-
          logging {
              level = "debug"
              format = "logfmt"
          }
          loki.write "default" {
            endpoint {
              url = "http://loki-headless.observability.svc.cluster.local:3100/loki/api/v1/push"
              tenant_id = "grafana"
            }
          }
          //// scrape k8s
          // discovery.kubernetes allows you to find scrape targets from Kubernetes resources.
          // It watches cluster state and ensures targets are continually synced with what is currently running in your cluster.
          discovery.kubernetes "pod" {
            role = "pod"
          }

          // discovery.relabel rewrites the label set of the input targets by applying one or more relabeling rules.
          // If no rules are defined, then the input targets are exported as-is.
          discovery.relabel "pod_logs" {
            targets = discovery.kubernetes.pod.targets

            // Label creation - "namespace" field from "__meta_kubernetes_namespace"
            rule {
              source_labels = ["__meta_kubernetes_namespace"]
              action = "replace"
              target_label = "namespace"
            }

            // Label creation - "pod" field from "__meta_kubernetes_pod_name"
            rule {
              source_labels = ["__meta_kubernetes_pod_name"]
              action = "replace"
              target_label = "pod"
            }

            // Label creation - "container" field from "__meta_kubernetes_pod_container_name"
            rule {
              source_labels = ["__meta_kubernetes_pod_container_name"]
              action = "replace"
              target_label = "container"
            }

            // Label creation -  "app" field from "__meta_kubernetes_pod_label_app_kubernetes_io_name"
            rule {
              source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name"]
              action = "replace"
              target_label = "app"
            }

            // Label creation -  "job" field from "__meta_kubernetes_namespace" and "__meta_kubernetes_pod_container_name"
            // Concatenate values __meta_kubernetes_namespace/__meta_kubernetes_pod_container_name
            rule {
              source_labels = ["__meta_kubernetes_namespace", "__meta_kubernetes_pod_container_name"]
              action = "replace"
              target_label = "job"
              separator = "/"
              replacement = "$1"
            }

            // Label creation - "container" field from "__meta_kubernetes_pod_uid" and "__meta_kubernetes_pod_container_name"
            // Concatenate values __meta_kubernetes_pod_uid/__meta_kubernetes_pod_container_name.log
            rule {
              source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
              action = "replace"
              target_label = "__path__"
              separator = "/"
              replacement = "/var/log/pods/*$1/*.log"
            }

            // Label creation -  "container_runtime" field from "__meta_kubernetes_pod_container_id"
            rule {
              source_labels = ["__meta_kubernetes_pod_container_id"]
              action = "replace"
              target_label = "container_runtime"
              regex = "^(\\S+):\\/\\/.+$"
              replacement = "$1"
            }
          }

          // loki.source.kubernetes tails logs from Kubernetes containers using the Kubernetes API.
          loki.source.kubernetes "pod_logs" {
            targets    = discovery.relabel.pod_logs.output
            forward_to = [loki.process.pod_logs.receiver]
          }

          // loki.process receives log entries from other Loki components, applies one or more processing stages,
          // and forwards the results to the list of receivers in the component's arguments.
          loki.process "pod_logs" {
            stage.static_labels {
              values = {
                cluster = "${SECRET_DOMAIN}",
              }
            }

            forward_to = [loki.write.default.receiver]
          }

          // loki.source.kubernetes_events tails events from the Kubernetes API and converts them
          // into log lines to forward to other Loki components.
          loki.source.kubernetes_events "cluster_events" {
            job_name   = "integrations/kubernetes/eventhandler"
            log_format = "logfmt"
            forward_to = [
              loki.process.cluster_events.receiver,
            ]
          }

          // loki.process receives log entries from other loki components, applies one or more processing stages,
          // and forwards the results to the list of receivers in the component's arguments.
          loki.process "cluster_events" {
            forward_to = [loki.write.default.receiver]

            stage.static_labels {
              values = {
              cluster = "${SECRET_DOMAIN}",
              }
            }

            stage.labels {
              values = {
              kubernetes_cluster_events = "job",
              }
            }
          }
